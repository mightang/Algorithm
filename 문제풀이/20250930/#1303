#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

int n, m;
string board[102];
bool vis[102][102];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int BFS(char target) {
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			vis[i][j] = 0;
		}
	}

	int result = 0;
	for (int y = 0; y < m; y++) {
		for (int x = 0; x < n; x++) {
			if (vis[y][x] || board[y][x] != target) continue;

			int area = 0;
			queue<pair<int, int>> q;
			q.push({ y, x });
			vis[y][x] = 1;
			while (!q.empty()) {
				auto cur = q.front();
				q.pop();
				area++;
				for (int dir = 0; dir < 4; dir++) {
					int ny = cur.first + dy[dir];
					int nx = cur.second + dx[dir];

					if (ny < 0 || ny >= m || nx < 0 || nx >= n) continue;
					if (vis[ny][nx] || board[ny][nx] != target) continue;
					vis[ny][nx] = 1;
					q.push({ ny, nx });
				}
			}

			result += (area * area);
		}
	}

	return result;
}

int main(void) {
	cin.tie(0);
	ios::sync_with_stdio(false);

	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> board[i];
	}

	cout << BFS('W') << " " << BFS('B');
	return 0;
}
